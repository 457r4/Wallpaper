#!/data/data/com.termux/files/usr/bin/zsh

termux-wake-lock

# Graphical resources
BLACK=$'\033[30m'
RED=$'\033[31m'
GREEN=$'\033[32m'
YELLOW=$'\033[33m'
BLUE=$'\033[34m'
MAGENTA=$'\033[35m'
CYAN=$'\033[36m'
WHITE=$'\033[37m'
CYAN=$'\033[36m' 
BOLD=$'\033[1m'
ITALIC=$'\033[3m'
UNDERLINE=$'\033[4m'
RESET=$'\033[0m'

# App routes
APPNAME=$(basename "$0")
APP_DATA="$HOME/.local/share/${APPNAME}"
METADATA="$APP_DATA/metadata"
APOD="$APP_DATA/apod"

[[ ! -d "$APP_DATA" ]] && mkdir -p "$APP_DATA"

# Settings
URL="https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY"
OFFSET=$((6*3600))
TITLE_STYLE="${BOLD}${YELLOW}"

# Calculates "today" so the image and descriptuon change can be done at OFFSET time
TIME() {
  now=$(date +%s)
  echo $(date -d "@$((now - OFFSET))" +%Y-%m-%d)
}

# Download data && keep a backup of past day
update_opt() {
  # Verify files' existence and make a backup if outdated
  utc=$(date -u +%Y-%m-%d)
  registered=''
  if [[ -f "${METADATA}.json" ]]; then
    registered=$(jq -r '.date' "${METADATA}.json")
  fi
  [[ -f "${METADATA}.json" ]] && [[ "$utc" != "$registered" ]] \
    && mv "${METADATA}.json" "${METADATA}.bak.json"
  [[ -f "${APOD}.jpg" ]] && [[ "$utc" != "$registered" ]] \
    && mv "${APOD}.jpg" "${APOD}.bak.jpg"

  # Check connection and obtain data 
  # If data fails to be obtained, retry
  up_to_date=false
  while [[ "$up_to_date" == false ]]; do
    if [[ "$(termux-wifi-connectioninfo | jq '.bssid')" != "null" ]]; then 
      wget -O "${METADATA}.json" "${URL}&date=$(date -u +%Y-%m-%d)" \
      && wget -O "${APOD}.jpg" "$(jq -r '.hdurl' "$METADATA.json")" \
      && up_to_date=true \
      || sleep 3600
    else
      sleep 3600
    fi
  done
}

# Set lock screen wallpaper
set_opt() {
  now=$(TIME)
  # Check for existence and time correspondance
  if [[ -f "${METADATA}.json" && -f "${APOD}.jpg" ]]; then
    [[ $now == $(jq -r '.date' "${METADATA}.json") ]] \
      && termux-wallpaper -l -f "${APOD}.jpg" \
      || termux-wallpaper -l -f "${APOD}.bak.jpg"
  else
    wallpaper -u
    set_opt
  fi
}

# Center a string
center() { # $1 is content, $2 is styke
  padding=$((COLUMNS/2 - ${#1}/2))
  printf "%-${padding}s%s\n" "" "${2}${1}${RESET}"
}
# Formats .title and .explanation like a newspaper
news() { # $1 is metadata location
  # Title
  center "$(jq -r '.title' "$1")" "$TITLE_STYLE"
  
  # Explanation (in two colums)
  explanation="  $(jq -r '.explanation' "$1")"  
  width=$((COLUMNS/2 - 2))
  lines=$(echo "$explanation" | fold -w "$width")

  IFS="\n"
  lines_array=("${(@f)lines}")
  lines_array_len=${#lines_array[@]}
  half=$((lines_array_len/2))

  (( half*2 < lines_array_len )) \
    && lines_array+=(" ") \
    && ((half++))

  for ((i = 1; i <= $half; i++)); do
    printf " %-${width}s  %s\n" "$lines_array[i]" "$lines_array[half+i]"
  done
}
# Print metadata
print_opt() {
  now=$(TIME)
  # Check for existence and time correspondance
  if [[ -f "${METADATA}.json" && -f "${APOD}.jpg" ]]; then
    [[ $now == $(jq -r '.date' "${METADATA}.json") ]] \
      && news "${METADATA}.json" \
      || news "${METADATA}.bak.json"
  fi
}
# Open APOD
display_opt() {
  now=$(TIME)
  # Check for existence and time correspondance
  if [[ -f "${METADATA}.json" && -f "${APOD}.jpg" ]]; then
    [[ $now == $(jq -r '.date' "${METADATA}.json") ]] \
      && termux-open "${APOD}.jpg" \
      || termux-open "${APOD}.bak.jpg"
  fi
}

opt_count=0
while getopts ":uspd" opt; do
  ((opt_count++))
  case "$opt" in
    u)
      selected="update_opt"
    ;;
    s)
      selected="set_opt"
    ;;
    p)
      selected="print_opt"
    ;;
    d)
      selected="display_opt"
    ;;
    \?) 
      echo "Invalid option: -$OPTARG" >&2 
      exit -1 
    ;;
  esac
done

if (( opt_count == 0 )); then
  echo "You must pick at least one option: -u, -s, -p or -d"
  exit -1 
elif (( opt_count > 1)); then
  echo "Too many options"
  exit -1 
fi

$selected

