#!/data/data/com.termux/files/usr/bin/zsh

termux-wake-lock

# Graphical resources
BLACK=$'\033[30m'
RED=$'\033[31m'
GREEN=$'\033[32m'
YELLOW=$'\033[33m'
BLUE=$'\033[34m'
MAGENTA=$'\033[35m'
CYAN=$'\033[36m'
WHITE=$'\033[37m'
CYAN=$'\033[36m' 
BOLD=$'\033[1m'
ITALIC=$'\033[3m'
UNDERLINE=$'\033[4m'
RESET=$'\033[0m'

# App routes
APPNAME=$(basename "$0")
APP_DATA="$HOME/.local/share/${APPNAME}_test"
METADATA="$APP_DATA/metadata"
APOD="$APP_DATA/apod"

[[ ! -d "$APP_DATA" ]] && mkdir -p "$APP_DATA"

# Main variables?
OFFSET=$((6*3600))
UP_TO_DATE=false


# ADITIONALLY
#   set and print should check if the displayed
#   image corresponds to the date

############### 6AM MODULE ###############
TIME() {
  now=$(date +%s)
  echo $(date -d "@$((now - OFFSET))" +%Y-%m-%d)
}
# hour=$(date +%s)
# corrected=$(($hour - 21600)) # Will move starting time to 6am
# corrected_formated=$(date -d "@$corrected" +%Y-%m-%d)
corrected_formated=$(TIME)
echo "corrected_formated: $corrected_formated"
if [[ "$corrected_formated" == "$(jq -r '.date' ${METADATA}.json)" ]]; then
  echo "It is 'today'"
else
  echo "It is not 'today'"
fi
##########################################



# Download data 
# Keep a backup of past day
update_opt() {
  # Verify files' existence and make a backup if outdated
  utc=$(date -u +%Y-%m-%d)
  registered=''
  if [[ -f "${METADATA}.json" ]]; then
    registered=$(jq -r '.date' "${METADATA}.json")
  fi
  [[ -f "${METADATA}.json" ]] && [[ "$utc" != "$registered" ]] \
    && mv "${METADATA}.json" "${METADATA}.bak.json"
  [[ -f "${APOD}.jpg" ]] && [[ "$utc" != "$registered" ]] \
    && mv "${APOD}.jpg" "${APOD}.bak.jpg"

  # Check connection and obtain data 
  # If data fails to be obtained, retry
  while [[ "$UP_TO_DATE" == false ]]; do
    URL="https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY"
    if [[ "$(termux-wifi-connectioninfo | jq '.bssid')" != "null" ]]; then 
      wget -O "${METADATA}.json" "${URL}&$(date -u %Y-%m-%d)" \
      && wget -O "${APOD}.jpg" "$(jq -r '.hdurl' "$METADATA.json")" \
      && UP_TO_DATE=true \
      || sleep 3600
    else
      sleep 3600
    fi
  done
}

# Set lock screen wallpaper
set_opt() {
  now=$(TIME)
  if [[ -f "${METADATA}.json" && -f "${APOD}.jpg" ]]; then
    [[ $now == $(jq -r '.date' "${METADATA}.json") ]] \
      && termux-wallpaper -l -f "${APOD}.jpg" \
      || sleep 4000 && set_opt
  else
    wallpaper -u
  fi
}

padding() {
  echo "$((${COLUMNS}/2 - ${#1}/2))"
}
center() {
  # First argument is content
  # Second argument is style
  p=$(padding $1)
  printf "%-${p}s%s\n" "" "${2}${1}${RESET}"
}
format() {
  # Title
  CODES="${BOLD}${YELLOW}"
  center "$(jq -r '.title' "$1")" "$CODES"
  
  # Explanation (in two colums)
  explanation="  $(jq -r '.explanation' "$1")"  
  width=$(($COLUMNS/2 - 2))
  lines=$(echo "$explanation" | fold -w $width)

  IFS="\n"
  lines_array=("${(@f)lines}")
  half=$((${#lines_array[@]}/2))

  for ((i = 1; i <= $half + 1; i++)); do
    printf " %-${WIDTH}s  %s\n" "$lines_array[i]" "$lines_array[half+i-1]"
  done
}
# Print metadata
print_opt() {
  now=$(TIME)
  if [[ -f "${METADATA}.json" && -f "${APOD}.jpg" ]]; then
    [[ $now == $(jq -r '.date' "${METADATA}.json") ]] \
      && format "${METADATA}.json" \
      || format "${METADATA}.bak.json"
  fi
}

opt_count=0
while getopts ":usp" opt; do
  ((opt_count++))
  case "$opt" in
    u)
      selected="update_opt"
    ;;
    s)
      selected="set_opt"
    ;;
    p)
      selected="print_opt"
    ;;
    \?) 
      echo "Invalid option: -$OPTARG" >&2 
      exit -1 
    ;;
  esac
done

if (( opt_count = 0 )); then
  echo "You must pick at least one option: -u, -s or -p"
  exit -1 
elif (( opt_count > 1)); then
  echo "Too many options"
  exit -1 
fi

$selected

